// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.shekhar.playground.roo.wedding.domain;

import com.shekhar.playground.roo.wedding.domain.Rsvp;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;

privileged aspect Rsvp_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer Rsvp.solrServer;
    
    public static QueryResponse Rsvp.search(String queryString) {
        return search(new SolrQuery("rsvp_solrsummary_t:" + queryString.toLowerCase()));
    }
    
    public static QueryResponse Rsvp.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void Rsvp.indexRsvp(Rsvp rsvp) {
        List<Rsvp> rsvps = new ArrayList<Rsvp>();
        rsvps.add(rsvp);
        indexRsvps(rsvps);
    }
    
    @Async
    public static void Rsvp.indexRsvps(Collection<Rsvp> rsvps) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (Rsvp rsvp : rsvps) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "rsvp_" + rsvp.getId());
            sid.addField("rsvp.attending_i", rsvp.getAttending());
            sid.addField("rsvp.code_s", rsvp.getCode());
            sid.addField("rsvp.confirmed_dt", rsvp.getConfirmed());
            sid.addField("rsvp.email_s", rsvp.getEmail());
            sid.addField("rsvp.id_l", rsvp.getId());
            sid.addField("rsvp.specialrequests_s", rsvp.getSpecialRequests());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("rsvp_solrsummary_t", new StringBuilder().append(rsvp.getAttending()).append(" ").append(rsvp.getCode()).append(" ").append(rsvp.getConfirmed()).append(" ").append(rsvp.getEmail()).append(" ").append(rsvp.getId()).append(" ").append(rsvp.getSpecialRequests()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void Rsvp.deleteIndex(Rsvp rsvp) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("rsvp_" + rsvp.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void Rsvp.postPersistOrUpdate() {
        indexRsvp(this);
    }
    
    @PreRemove
    private void Rsvp.preRemove() {
        deleteIndex(this);
    }
    
    public static final SolrServer Rsvp.solrServer() {
        SolrServer _solrServer = new Rsvp().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
