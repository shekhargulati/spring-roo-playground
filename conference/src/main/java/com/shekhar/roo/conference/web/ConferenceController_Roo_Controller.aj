// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.shekhar.roo.conference.web;

import com.shekhar.roo.conference.domain.Conference;
import com.shekhar.roo.conference.domain.Talks;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ConferenceController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ConferenceController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String ConferenceController.create(@Valid Conference conference, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("conference", conference);
            addDateTimeFormatPatterns(model);
            return "conferences/create";
        }
        conference.persist();
        return "redirect:/conferences/" + encodeUrlPathSegment(conference.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ConferenceController.createForm(Model model) {
        model.addAttribute("conference", new Conference());
        addDateTimeFormatPatterns(model);
        return "conferences/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ConferenceController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("conference", Conference.findConference(id));
        model.addAttribute("itemId", id);
        return "conferences/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ConferenceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("conferences", Conference.findConferenceEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Conference.countConferences() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("conferences", Conference.findAllConferences());
        }
        addDateTimeFormatPatterns(model);
        return "conferences/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ConferenceController.update(@Valid Conference conference, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("conference", conference);
            addDateTimeFormatPatterns(model);
            return "conferences/update";
        }
        conference.merge();
        return "redirect:/conferences/" + encodeUrlPathSegment(conference.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ConferenceController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("conference", Conference.findConference(id));
        addDateTimeFormatPatterns(model);
        return "conferences/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ConferenceController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Conference.findConference(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/conferences?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("talkses")
    public Collection<Talks> ConferenceController.populateTalkses() {
        return Talks.findAllTalkses();
    }
    
    Converter<Conference, String> ConferenceController.getConferenceConverter() {
        return new Converter<Conference, String>() {
            public String convert(Conference conference) {
                return new StringBuilder().append(conference.getName()).append(" ").append(conference.getDescription()).append(" ").append(conference.getOrganizerName()).toString();
            }
        };
    }
    
    Converter<Talks, String> ConferenceController.getTalksConverter() {
        return new Converter<Talks, String>() {
            public String convert(Talks talks) {
                return new StringBuilder().append(talks.getTitle()).append(" ").append(talks.getDescription()).toString();
            }
        };
    }
    
    @PostConstruct
    void ConferenceController.registerConverters() {
        conversionService.addConverter(getConferenceConverter());
        conversionService.addConverter(getTalksConverter());
    }
    
    void ConferenceController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("conference_startdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        model.addAttribute("conference_enddate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String ConferenceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
