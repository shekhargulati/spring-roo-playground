// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.shekhar.roo.conference.domain;

import com.shekhar.roo.conference.domain.Conference;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect ConferenceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConferenceDataOnDemand: @Component;
    
    private Random ConferenceDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Conference> ConferenceDataOnDemand.data;
    
    public Conference ConferenceDataOnDemand.getNewTransientConference(int index) {
        com.shekhar.roo.conference.domain.Conference obj = new com.shekhar.roo.conference.domain.Conference();
        java.lang.String description = "description_" + index;
        if (description.length() > 4000) {
            description  = description.substring(0, 4000);
        }
        obj.setDescription(description);
        obj.setEndDate(new java.util.Date(new java.util.Date().getTime() + 10000000L));
        obj.setName("name_" + index);
        obj.setOrganizerEmail("organizerEmail_" + index);
        obj.setOrganizerName("organizerName_" + index);
        obj.setStartDate(new java.util.Date(new java.util.Date().getTime() + 10000000L));
        obj.setWebsite("website_" + index);
        return obj;
    }
    
    public Conference ConferenceDataOnDemand.getSpecificConference(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Conference obj = data.get(index);
        return Conference.findConference(obj.getId());
    }
    
    public Conference ConferenceDataOnDemand.getRandomConference() {
        init();
        Conference obj = data.get(rnd.nextInt(data.size()));
        return Conference.findConference(obj.getId());
    }
    
    public boolean ConferenceDataOnDemand.modifyConference(Conference obj) {
        return false;
    }
    
    public void ConferenceDataOnDemand.init() {
        data = com.shekhar.roo.conference.domain.Conference.findConferenceEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Conference' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.shekhar.roo.conference.domain.Conference>();
        for (int i = 0; i < 10; i++) {
            com.shekhar.roo.conference.domain.Conference obj = getNewTransientConference(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
